{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#documentation-index","title":"Documentation Index","text":"<p>Welcome to the documentation for GITHUB PROJECT TEMPLATE. Use this index to navigate the project docs.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Project Roadmap</li> <li>Changelog</li> <li>Security Policy</li> <li>Support</li> <li>Manual</li> <li>Troubleshooting</li> <li>Telemetry Opt-In</li> <li>Release Guide</li> </ul> <p>Note: These links point to files outside the documentation site and will only work when browsing the repository, not in the published MkDocs site.</p> <ul> <li>Onboarding Guide: Steps to get up and running.</li> <li>Deployment Guide: How to deploy the project across environments.</li> <li>System Architecture: Overview of system components and data flow.</li> </ul>"},{"location":"#reference","title":"Reference","text":"<ul> <li>Structure Map: Auto-generated project structure.</li> <li>API Specification: OpenAPI 3.0 definition for services.</li> </ul>"},{"location":"#internal-docs","title":"Internal Docs","text":"<ul> <li>Obsidian Vault README: Instructions for using the internal Obsidian vault.</li> </ul>"},{"location":"#contribution","title":"Contribution","text":"<ul> <li>Contributing Guidelines: How to contribute to the project.</li> <li>Code of Conduct: Community guidelines.</li> <li>Security Policy: Reporting vulnerabilities.</li> </ul>"},{"location":"accessibility/","title":"Accessibility &amp; Inclusion Statement","text":"<p>We strive to make this project accessible and inclusive for everyone.</p> <ul> <li>Use inclusive language in code, docs, and discussions.</li> <li>Ensure documentation is clear and readable.</li> <li>Welcome contributions from people of all backgrounds and abilities.</li> </ul> <p>If you have suggestions to improve accessibility, please open an issue or pull request.</p>"},{"location":"architecture/","title":"System Architecture","text":"<p>This document outlines the high-level architecture of the GITHUB PROJECT TEMPLATE. Comment out or prune sections that do not apply to your stack.</p>"},{"location":"architecture/#overview","title":"Overview","text":"<p>Describe the system's purpose and its main components. Example:</p> <p>This project is a multi-stack template supporting Python (FastAPI), Node.js (Express), and TypeScript (NestJS or Express). It is designed for rapid prototyping and production-ready deployments.</p>"},{"location":"architecture/#components","title":"Components","text":""},{"location":"architecture/#frontend-optional","title":"Frontend (Optional)","text":""},{"location":"architecture/#backendapi-choose-one-or-more","title":"Backend/API (Choose one or more)","text":""},{"location":"architecture/#python-fastapi","title":"Python (FastAPI)","text":"<pre><code>Request --&gt; FastAPI app (python/src/main.py) --&gt; Business logic --&gt; Response\n</code></pre> <ul> <li>Handles API endpoints, validation, and business logic</li> <li>Example endpoint: <code>/hello?name=World</code></li> </ul>"},{"location":"architecture/#nodejs-express","title":"Node.js (Express)","text":"<p>Express app (nodejs/src/index.js) --&gt; Business logic --&gt; Response</p> <ul> <li>Handles API endpoints, middleware, and business logic</li> <li>Example endpoint: <code>/hello?name=World</code> --&gt;</li> </ul>"},{"location":"architecture/#typescript-nestjs-or-express","title":"TypeScript (NestJS or Express)","text":"<p>NestJS/Express app (typescript/src/index.ts) --&gt; Business logic --&gt; Response</p> <ul> <li>Handles API endpoints, validation, and business logic</li> <li>Example endpoint: <code>/hello?name=World</code> --&gt;</li> </ul>"},{"location":"architecture/#database-optional","title":"Database (Optional)","text":""},{"location":"architecture/#cachingqueue-optional","title":"Caching/Queue (Optional)","text":""},{"location":"architecture/#devopscicd","title":"DevOps/CI/CD","text":"<ul> <li>GitHub Actions for CI (see .github/workflows/)</li> <li>Docker &amp; Docker Compose for local development</li> <li>Automated container security scanning (Trivy)</li> <li>Mock API server for contract testing (Prism)</li> <li>Internationalization (i18n) workflow and sample translations</li> <li>Telemetry opt-in workflow</li> </ul> <p>Prune or comment out sections above to match your actual stack.</p> <ul> <li>Outline data storage choice (e.g., PostgreSQL, MongoDB).</li> <li>Describe key schemas or tables.</li> </ul>"},{"location":"architecture/#obsidian-vault","title":"Obsidian Vault","text":"<ul> <li>Used for internal documentation and planning.</li> </ul>"},{"location":"architecture/#automation-scripts","title":"Automation Scripts","text":"<ul> <li>List of key scripts (<code>setup.sh</code>, <code>test.sh</code>, <code>release.sh</code>, <code>mock-api.sh</code>, <code>mock-api.ps1</code>).</li> </ul>"},{"location":"architecture/#data-flow","title":"Data Flow","text":"<p>Illustrate how data moves through the system:</p> <ol> <li>User request \u2192 Frontend</li> <li>Frontend \u2192 Backend</li> <li>Backend \u2192 Database</li> <li>Backend \u2192 Frontend response</li> </ol>"},{"location":"architecture/#deployment","title":"Deployment","text":"<p>Outline deployment strategy:</p> <ul> <li>CI/CD pipelines (GitHub Actions workflows).</li> <li>Hosting platforms (e.g., Render, Vercel, Docker).</li> </ul>"},{"location":"architecture/#security-considerations","title":"Security Considerations","text":"<ul> <li>Authentication and authorization approaches.</li> <li>Secret management (e.g., <code>.env</code> variables).</li> <li>Vulnerability scanning and dependency updates.</li> </ul>"},{"location":"deployment/","title":"Deployment Guide","text":"<p>This document describes the steps to deploy the GITHUB PROJECT TEMPLATE project to various environments.</p>"},{"location":"deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li>Access to target hosting platform (e.g., Render, Vercel, AWS, Azure).</li> <li><code>git</code> CLI installed and authenticated.</li> <li>Docker installed (if using Docker-based deployment).</li> <li>Environment variables configured in the target environment.</li> </ul>"},{"location":"deployment/#deployment-environments","title":"Deployment Environments","text":""},{"location":"deployment/#1-local-development","title":"1. Local Development","text":""},{"location":"deployment/#option-a-docker-compose-recommended-for-multi-stack","title":"Option A: Docker Compose (Recommended for multi-stack)","text":"<pre><code># Build and start all services\ndocker-compose up --build\n# Stop and remove containers\ndocker-compose down\n</code></pre>"},{"location":"deployment/#option-b-run-services-individually-choose-your-stack","title":"Option B: Run Services Individually (Choose your stack)","text":""},{"location":"deployment/#python-fastapi","title":"Python (FastAPI)","text":"<pre><code>cd python\npip install -r requirements.txt\nuvicorn src.main:app --reload\n# App at http://localhost:8000\n</code></pre>"},{"location":"deployment/#nodejs-express","title":"Node.js (Express)","text":""},{"location":"deployment/#typescript-nestjsexpress","title":"TypeScript (NestJS/Express)","text":"<p>Comment out or prune sections above to match your stack.</p>"},{"location":"deployment/#2-staging","title":"2. Staging","text":"<ol> <li>Push to <code>staging</code> branch.</li> <li>Configure CI to deploy <code>staging</code> branch to staging environment.</li> <li>Verify deployment and run smoke tests.</li> </ol>"},{"location":"deployment/#3-production","title":"3. Production","text":"<ol> <li>Tag the release (e.g., <code>v1.0.0</code>) and push tag to remote:</li> </ol> <p><code>bash    git tag v1.0.0    git push origin v1.0.0</code></p> <ol> <li>CI workflow triggered on tag creates a production build and deploys to production server.</li> <li>Monitor deployment logs and health endpoints (e.g., <code>/health</code>).</li> </ol>"},{"location":"deployment/#cicd-configuration","title":"CI/CD Configuration","text":"<ul> <li>The GitHub Actions workflows in <code>.github/workflows/</code> automatically build, test, and deploy:</li> <li><code>python.yml</code> for Python CI.</li> <li><code>nodejs.yml</code> for Node.js CI.</li> <li><code>typescript.yml</code> for TypeScript CI.</li> <li>Add custom deploy steps in each workflow as needed.</li> </ul>"},{"location":"deployment/#rollback-strategy","title":"Rollback Strategy","text":"<ul> <li>To rollback, revert to a previous tag:</li> </ul> <p><code>bash   git checkout v0.9.0   git push origin v0.9.0 --force</code></p> <ul> <li>Redeploy the reverted tag via CI.</li> </ul>"},{"location":"deployment/#post-deployment","title":"Post-Deployment","text":"<ul> <li>Run database migrations (if applicable):</li> </ul> <p><code>bash   cd python   alembic upgrade head</code></p> <ul> <li>Clear caches or CDN if necessary.</li> <li>Notify the team of the deployment status.</li> </ul>"},{"location":"editor/","title":"Editor &amp; IDE Recommendations","text":"<p>We recommend using Visual Studio Code for the best experience.</p>"},{"location":"editor/#recommended-extensions","title":"Recommended Extensions","text":"<ul> <li>ESLint</li> <li>Prettier</li> <li>Python</li> <li>Jupyter</li> <li>Docker</li> <li>GitLens</li> </ul>"},{"location":"editor/#settings","title":"Settings","text":"<ul> <li>Enable format on save</li> <li>Use the workspace <code>.editorconfig</code> and <code>.prettierrc</code> for consistent style</li> </ul> <p>Other editors (PyCharm, WebStorm, etc.) are also supported. See their docs for project setup.</p>"},{"location":"first-pr/","title":"First-Time Contributor Guide","text":"<p>Welcome! Here\u2019s how to make your first pull request:</p> <ol> <li>Fork the repository on GitHub.</li> <li>Clone your fork:</li> </ol> <p><code>pwsh    git clone https://github.com/your-username/GITHUB-PROJECT-TEMPLATE.git    cd GITHUB-PROJECT-TEMPLATE</code></p> <ol> <li>Create a new branch:</li> </ol> <p><code>pwsh    git checkout -b my-first-change</code></p> <ol> <li>Make your changes (edit code, docs, etc.)</li> <li>Commit using Conventional Commits:</li> </ol> <p><code>pwsh    git commit -m \"docs: improve onboarding guide\"</code></p> <ol> <li>Push your branch:</li> </ol> <p><code>pwsh    git push origin my-first-change</code></p> <ol> <li>Open a Pull Request on GitHub.</li> </ol> <p>See CONTRIBUTING.md for more details.</p>"},{"location":"license-attribution/","title":"License &amp; Attribution Guidance","text":"<ul> <li>All code is MIT licensed unless otherwise noted in a file header.</li> <li>When adding third-party code, include the original license and attribution in the file or in this document.</li> <li>For dependencies, ensure their licenses are compatible with MIT.</li> <li>See LICENSE for details.</li> </ul>"},{"location":"mkdocs/","title":"MkDocs","text":""},{"location":"mkdocs/#local-development","title":"Local Development","text":"<p>To serve the documentation locally with live reload:</p> <pre><code>python -m mkdocs serve\n</code></pre>"},{"location":"mkdocs/#build-documentation","title":"Build Documentation","text":"<p>To build the static site:</p> <pre><code>python -m mkdocs build\n</code></pre>"},{"location":"mkdocs/#publish-to-github-pages","title":"Publish to GitHub Pages","text":"<p>To deploy to GitHub Pages:</p> <pre><code>python -m mkdocs gh-deploy\n</code></pre>"},{"location":"mkdocs/#requirements","title":"Requirements","text":"<ul> <li>Python 3.7+</li> <li>mkdocs</li> <li>mkdocs-material</li> </ul> <p>Install requirements (if not already):</p> <pre><code>pip install mkdocs mkdocs-material\n</code></pre>"},{"location":"onboarding/","title":"Onboarding","text":""},{"location":"onboarding/#onboarding-guide","title":"Onboarding Guide","text":"<p>Welcome to the GITHUB PROJECT TEMPLATE! This guide helps new contributors and team members get started quickly.</p>"},{"location":"onboarding/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git installed and configured with your GitHub account.</li> <li>Node.js (&gt;=14 LTS) and npm installed.</li> <li>Python (&gt;=3.8) and pip installed.</li> <li>Optional: Docker &amp; Docker Compose for containerized setup.</li> <li>An editor or IDE of your choice (e.g., VS Code, IntelliJ).</li> </ul>"},{"location":"onboarding/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/&lt;your-username&gt;/GITHUB-PROJECT-TEMPLATE.git\ncd GITHUB-PROJECT-TEMPLATE\n</code></pre>"},{"location":"onboarding/#2-install-dependencies","title":"2. Install Dependencies","text":"<p>Run the setup script to install all required dependencies and initialize your environment:</p> <pre><code>./scripts/setup.sh\n</code></pre> <p>This will:</p> <ul> <li>Copy <code>.env.example</code> to <code>.env</code></li> <li>Install Python packages</li> <li>Install Node.js and TypeScript packages</li> </ul>"},{"location":"onboarding/#3-explore-the-structure","title":"3. Explore the Structure","text":"<p>Familiarize yourself with the main folders:</p> <ul> <li><code>python/</code>: Python backend code and tests.</li> <li><code>nodejs/</code>: Node.js service code and tests.</li> <li><code>typescript/</code>: TypeScript service code and tests.</li> <li><code>obsidian/</code>: Internal docs vault (open in Obsidian).</li> <li><code>docs/</code>: Public documentation.</li> <li><code>i18n/</code>: Sample translations for internationalization (i18n).</li> <li><code>TELEMETRY_OPT_IN.md</code>: Opt-in for anonymous analytics.</li> <li><code>scripts/</code>: Automation scripts (testing, formatting, release, mock API server, etc.).</li> <li><code>.github/</code>: CI/CD workflows, issue &amp; PR templates, and configs.</li> </ul>"},{"location":"onboarding/#4-run-the-project-locally-choose-your-stack","title":"4. Run the Project Locally (Choose your stack)","text":""},{"location":"onboarding/#python-fastapi","title":"Python (FastAPI)","text":"<pre><code>cd python\npip install -r requirements.txt\nuvicorn src.main:app --reload\n# App at http://localhost:8000\n</code></pre>"},{"location":"onboarding/#nodejs-express","title":"Node.js (Express)","text":""},{"location":"onboarding/#typescript-nestjsexpress","title":"TypeScript (NestJS/Express)","text":"<p>Comment out or prune sections above to match your stack.</p>"},{"location":"onboarding/#4b-mock-api-server-ui","title":"4b. Mock API Server &amp; UI","text":"<p>You can run a local mock API server from your OpenAPI spec for contract testing and rapid prototyping:</p> <pre><code># On Windows PowerShell\n./scripts/mock-api.ps1\n\n# On Linux/macOS (bash)\n./scripts/mock-api.sh\n</code></pre> <p>Or use the Mock API workflow to run it in CI.</p> <p>See also: <code>mock-ui/README.md</code> for all UI and API testing options, including static HTML/JS, Swagger UI, and a React+Vite mock UI.</p>"},{"location":"onboarding/#5-running-tests","title":"5. Running Tests","text":""},{"location":"onboarding/#onboarding-guide_1","title":"Onboarding Guide","text":""},{"location":"onboarding/#automation-cicd-highlights","title":"Automation &amp; CI/CD Highlights","text":"<ul> <li>Container Security Scan: Automated Trivy scan of Docker images for vulnerabilities (container-security.yml).</li> <li>Mock API Server: Start a local mock server from your OpenAPI spec using Prism (mock-api.yml, <code>scripts/mock-api.sh</code>, <code>scripts/mock-api.ps1</code>).</li> <li>Internationalization (i18n): Sample translations and workflow (i18n/locales/, i18n-sample.yml).</li> <li>Telemetry Opt-In: Explicit opt-in for anonymous usage analytics (TELEMETRY_OPT_IN.md, telemetry-optin.yml).</li> </ul> <p>Run all tests across languages:</p> <pre><code>./scripts/test.sh\n</code></pre>"},{"location":"onboarding/#6-formatting-code","title":"6. Formatting Code","text":"<p>Ensure consistent code style:</p> <pre><code>./scripts/format.sh\n</code></pre>"},{"location":"onboarding/#7-creating-a-feature-branch","title":"7. Creating a Feature Branch","text":"<ol> <li>Create a new branch from <code>main</code>:</li> </ol> <p><code>bash    git checkout main    git pull    git checkout -b feature/your-feature-name</code></p> <ol> <li>Make your changes and commit with clear messages:</li> </ol> <p><code>bash    git commit -m \"feat: add X feature\"</code></p> <ol> <li>Push and open a Pull Request:</li> </ol> <p><code>bash    git push -u origin feature/your-feature-name</code></p>"},{"location":"onboarding/#8-submitting-a-pull-request","title":"8. Submitting a Pull Request","text":"<ul> <li>Fill in the PR template with description, type of change, and checklist.</li> <li>Reference any related issues using <code>Closes #issue-number</code>.</li> <li>Request reviews from CODEOWNERS or specific reviewers.</li> </ul>"},{"location":"onboarding/#9-reviewing-and-merging","title":"9. Reviewing and Merging","text":"<ul> <li>Address review comments.</li> <li>Ensure CI checks pass.</li> <li>Squash or rebase commits as needed.</li> <li>Merge with a descriptive commit message.</li> </ul>"},{"location":"onboarding/#10-releasing-a-new-version","title":"10. Releasing a New Version","text":"<p>After merging to <code>main</code>, run:</p> <pre><code>./scripts/release.sh X.Y.Z\n</code></pre> <p>This will:</p> <ul> <li>Bump version in <code>version.txt</code> and config files.</li> <li>Update <code>CHANGELOG.md</code> with commit history.</li> <li>Tag and push the release.</li> </ul> <p>You're all set! If you have any questions, check the <code>docs/</code> folder or reach out to the team. Happy coding! \ud83c\udf89</p>"},{"location":"structure/","title":"Project Structure","text":"<p>This document is generated automatically to describe the structure of the project.</p>"},{"location":"structure/#root-directory","title":"Root Directory","text":"<ul> <li><code>0-START-HERE.md</code>: Initial instructions for the project.</li> <li><code>CHANGELOG.md</code>: Tracks changes made to the project.</li> <li><code>README.md</code>: Overview of the project.</li> </ul>"},{"location":"structure/#directories","title":"Directories","text":"<ul> <li><code>.github/</code>: GitHub-specific configurations.</li> <li><code>docs/</code>: Documentation files.</li> <li><code>nodejs/</code>: Node.js-related code and configurations.</li> <li><code>python/</code>: Python-related code and configurations.</li> <li><code>typescript/</code>: TypeScript-related code and configurations.</li> <li><code>scripts/</code>: Utility scripts for various tasks.</li> <li><code>obsidian/</code>: Obsidian vault for project notes.</li> <li><code>i18n/</code>: Sample translations for internationalization (i18n).</li> <li><code>TELEMETRY_OPT_IN.md</code>: Opt-in for anonymous analytics.</li> </ul> <p>Comment out or prune sections above to match your stack.</p>"},{"location":"structure/#scripts","title":"Scripts","text":"<ul> <li><code>build.sh</code>: Universal build script.</li> <li><code>deploy.sh</code>: Placeholder deploy logic.</li> <li><code>format.sh</code>: Format Python, JS, TS.</li> <li><code>generate-readme.sh</code>: Create structure map.</li> <li><code>obsidian-export.sh</code>: Zip vault.</li> <li><code>release.sh</code>: One-line version + changelog + tag.</li> <li><code>setup.sh</code>: Install all deps + .env.</li> <li><code>setup-hooks.sh</code>: Git pre-commit hook setup.</li> <li><code>sync-docs.sh</code>: Mirror Obsidian to docs/.</li> <li><code>test.sh</code>: Unified test runner.</li> <li><code>mock-api.sh</code>, <code>mock-api.ps1</code>: Start a local mock API server from OpenAPI spec.</li> <li><code>update-changelog.sh</code>: Appends new commits to CHANGELOG.md.</li> <li><code>version-bump.sh</code>: Bumps version in version.txt + configs.</li> </ul>"},{"location":"structure/#project-structure_1","title":"Project Structure","text":""},{"location":"structure/#automation-cicd-highlights","title":"Automation &amp; CI/CD Highlights","text":"<ul> <li>Container Security Scan: Automated Trivy scan of Docker images for vulnerabilities.</li> <li>Mock API Server: Start a local mock server from your OpenAPI spec using Prism.</li> <li>Internationalization (i18n): Sample translations and workflow.</li> <li>Telemetry Opt-In: Explicit opt-in for anonymous usage analytics.</li> </ul>"},{"location":"api/","title":"API Documentation","text":"<ul> <li>OpenAPI spec: openapi.yml</li> <li>Postman collection: ../../postman_collection.json</li> <li>Insomnia collection: ../../insomnia_api_test.yaml</li> <li>k6 load test: ../../k6-api-test.js</li> </ul>"},{"location":"api/#mock-api-server","title":"Mock API Server","text":"<p>You can run a local mock API server from your OpenAPI spec for contract testing and rapid prototyping:</p> <pre><code># On Windows PowerShell\n./scripts/mock-api.ps1\n\n# On Linux/macOS (bash)\n./scripts/mock-api.sh\n</code></pre> <p>Or use the Mock API workflow to run it in CI.</p>"},{"location":"api/#preview-openapi-docs","title":"Preview OpenAPI Docs","text":"<p>You can preview the OpenAPI spec locally with Redoc CLI or Swagger UI:</p> <pre><code># Redoc CLI\nnpx redoc-cli serve docs/api/openapi.yml\n\n# Swagger UI (Docker)\ndocker run -p 8080:8080 -e SWAGGER_JSON=/foo/openapi.yml -v ${PWD}/docs/api/openapi.yml:/foo/openapi.yml swaggerapi/swagger-ui\n</code></pre>"}]}